knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = 'hide')
library(tidyverse)
library(GGally)
library(car)
library(MASS)
library(knitr)
library(kableExtra)
full_model <- lm(Target ~ ., data = diabetes)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = 'hide')
library(tidyverse)
library(GGally)
library(car)
library(MASS)
library(knitr)
library(kableExtra)
setwd("C:/Users/mnusa/STAT 481/Project")
diabetes <- read.table("Diabetes.txt", header = TRUE)
diabetes$SEX <- as.factor(diabetes$SEX)  # Convert SEX to a binary categorical factor
kable(summary(diabetes), caption = "Five-number summary and means of all variables") %>%
kable_styling(full_width = FALSE)
table(diabetes$SEX)
cor_matrix <- cor(diabetes[, sapply(diabetes, is.numeric)])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "", fill = "Correlation")
diabetes %>%
select_if(is.numeric) %>%
pivot_longer(cols = everything()) %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot(fill = "lightblue") +
theme_minimal()
full_model <- lm(Target ~ ., data = diabetes)
summary(full_model)
vif(full_model)
# Refit the model without S1 to address multicollinearity
reduced_model <- lm(Target ~ . - S1, data = diabetes)
summary(reduced_model)
# Refit the model without S1 to address multicollinearity
reduced_model <- lm(Target ~ . - S2, data = diabetes)
summary(reduced_model)
# Refit the model without S1 to address multicollinearity
reduced_model <- lm(Target ~ . - S1, data = diabetes)
summary(reduced_model)
# Refit the model without S1 to address multicollinearity
reduced_model <- lm(Target ~ . - S3, data = diabetes)
summary(reduced_model)
# Refit the model without S1 to address multicollinearity
reduced_model <- lm(Target ~ . - S1, data = diabetes)
summary(reduced_model)
# Diagnostic plots for linearity, normality, and homoscedasticity
par(mfrow = c(2, 2))
plot(reduced_model)
shapiro.test(resid(reduced_model))
ncvTest(reduced_model)
boxcox(reduced_model)
# Apply log transformation
diabetes$log_Target <- log(diabetes$Target)
# Refit model excluding S1, now predicting log(Target)
log_model <- lm(log_Target ~ . - Target - S1, data = diabetes)
summary(log_model)
# Diagnostic plots for linearity, normality, and homoscedasticity
par(mfrow = c(2, 2))
plot(log_model)
shapiro.test(resid(log_model))
ncvTest(log_model)
# Backward selection using stepAIC from the MASS package
library(MASS)
step_model <- step(log_model, direction = "backward", trace = FALSE)
# Summary of the selected model
summary(step_model)
# Compare with full model
anova(step_model, log_model)
# Check assumptions again
par(mfrow = c(2, 2))
plot(step_model)
# Tests for final model
shapiro.test(resid(step_model))
ncvTest(step_model)
kable(summary(diabetes), caption = "Five-number summary and means of all variables") %>%
kable_styling(full_width = FALSE)
#table(diabetes$SEX)
# Backward selection using stepAIC from the MASS package
step_model <- step(log_model, direction = "backward", trace = FALSE)
# Summary of the selected model
#summary(step_model)
# Compare with full model
#anova(step_model, log_model)
# Check assumptions again
par(mfrow = c(2, 2))
plot(step_model)
# Tests for final model
#shapiro.test(resid(step_model))
#ncvTest(step_model)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = 'hide')
library(tidyverse)
library(GGally)
library(car)
library(MASS)
library(knitr)
library(kableExtra)
setwd("C:/Users/mnusa/STAT 481/Project")
diabetes <- read.table("Diabetes.txt", header = TRUE)
diabetes$SEX <- as.factor(diabetes$SEX)  # Convert SEX to a binary categorical factor
kable(summary(diabetes), caption = "Five-number summary and means of all variables") %>%
kable_styling(full_width = FALSE)
table(diabetes$SEX)
kable(summary(diabetes), caption = "Five-number summary and means of all variables") %>%
kable_styling(full_width = FALSE)
table(diabetes$SEX)
kable(summary(diabetes), caption = "Five-number summary and means of all variables") %>%
kable_styling(full_width = FALSE)
table(diabetes$SEX)
cor_matrix <- cor(diabetes[, sapply(diabetes, is.numeric)])
ggplot(data = as.data.frame(as.table(cor_matrix)), aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "", fill = "Correlation")
diabetes %>%
select_if(is.numeric) %>%
pivot_longer(cols = everything()) %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot(fill = "lightblue") +
theme_minimal()
full_model <- lm(Target ~ ., data = diabetes)
summary(full_model)
ggcorr(diabetes, label = TRUE) +
ggtitle("Correlation Matrix")
vif(full_model)
# Refit the model without S1 to address multicollinearity
reduced_model <- lm(Target ~ . - S1, data = diabetes)
summary(reduced_model)
# Diagnostic plots for linearity, normality, and homoscedasticity
par(mfrow = c(2, 2))
plot(reduced_model)
shapiro.test(resid(reduced_model))
ncvTest(reduced_model)
boxcox(reduced_model)
# Apply log transformation
diabetes$log_Target <- log(diabetes$Target)
# Refit model excluding S1, now predicting log(Target)
log_model <- lm(log_Target ~ . - Target - S1, data = diabetes)
summary(log_model)
# Diagnostic plots for linearity, normality, and homoscedasticity
par(mfrow = c(2, 2))
plot(log_model)
shapiro.test(resid(log_model))
ncvTest(log_model)
# Backward selection using stepAIC from the MASS package
step_model <- step(log_model, direction = "backward", trace = FALSE)
# Summary of the selected model
summary(step_model)
# Compare with full model
anova(step_model, log_model)
# Check assumptions again
par(mfrow = c(2, 2))
plot(step_model)
# Tests for final model
shapiro.test(resid(step_model))
ncvTest(step_model)
# Backward selection using stepAIC from the MASS package
step_model <- step(log_model, direction = "backward", trace = FALSE)
# Summary of the selected model
summary(step_model)
# Compare with full model
anova(step_model, log_model)
# Check assumptions again
par(mfrow = c(2, 2))
plot(step_model)
# Tests for final model
shapiro.test(resid(step_model))
ncvTest(step_model)
